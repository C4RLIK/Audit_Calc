import pandas as pd
import numpy as np
import streamlit as st
from io import BytesIO
from docx import Document
from docx.shared import Pt, Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH
import matplotlib.pyplot as plt

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —É—Ä–æ–≤–Ω—è —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
def calculate_materiality(data, deviation_threshold, rounding_limit):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        values = data['–ó–Ω–∞—á–µ–Ω–∏–µ'].dropna().astype(float).values
        if len(values) == 0:
            return None, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        mean = np.mean(values)
        deviations = [(x, abs(x - mean) / mean * 100) for x in values]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–º—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é
        filtered = [x for x, dev in deviations if dev <= deviation_threshold]
        excluded = [x for x, dev in deviations if dev > deviation_threshold]
        
        if not filtered:
            return None, "–í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∫–∞–∫ –Ω–µ—Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω—ã–µ"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å—Ä–µ–¥–Ω–µ–µ
        new_mean = np.mean(filtered)
        
        # –û–∫—Ä—É–≥–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        rounded = round(new_mean / 100) * 100
        if abs(rounded - new_mean) > rounding_limit:
            rounded = new_mean
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—á—ë—Ç–∞
        details = {
            "–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ": data,
            "–°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ": mean,
            "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è": deviations,
            "–ò—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ": excluded,
            "–û—Å—Ç–∞–≤—à–∏–µ—Å—è": filtered,
            "–ù–æ–≤–æ–µ —Å—Ä–µ–¥–Ω–µ–µ": new_mean,
            "–û–∫—Ä—É–≥–ª—ë–Ω–Ω–æ–µ": rounded,
            "–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏": data['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å'].values
        }
        
        return rounded, details
    
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞: {str(e)}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Word-–æ—Ç—á—ë—Ç–∞
def create_word_report(details, deviation_threshold):
    doc = Document()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
    style = doc.styles['Normal']
    font = style.font
    font.name = 'Times New Roman'
    font.size = Pt(12)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    title = doc.add_heading('–†–∞—Å—á—ë—Ç —É—Ä–æ–≤–Ω—è —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏', level=1)
    title.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    # 1. –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    doc.add_heading('1. –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', level=2)
    for idx, (name, value) in enumerate(zip(details["–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏"], details["–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"]['–ó–Ω–∞—á–µ–Ω–∏–µ']), 1):
        doc.add_paragraph(f"{idx}. {name}: {value:,.0f} —Ä—É–±.", style='ListNumber')
    
    # 2. –°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ
    doc.add_heading('2. –†–∞—Å—á—ë—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ:', level=2)
    values_str = " + ".join([f"{x:,.0f}" for x in details["–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"]['–ó–Ω–∞—á–µ–Ω–∏–µ']])
    doc.add_paragraph(f"({values_str}) / {len(details['–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'])} = {details['–°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ']:,.0f} —Ä—É–±.")
    
    # 3. –û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    doc.add_heading('3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ:', level=2)
    for x, dev in details["–û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"]:
        doc.add_paragraph(f"‚Ä¢ {(x - details['–°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ'])/details['–°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ']*100:+.2f}%", style='ListBullet')
    
    # 4. –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    doc.add_heading(f'4. –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º > {deviation_threshold}%:', level=2)
    if details["–ò—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ"]:
        for x in details["–ò—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ"]:
            doc.add_paragraph(f"‚Ä¢ {x:,.0f} —Ä—É–±.", style='ListBullet')
    else:
        doc.add_paragraph("–ù–µ—Ç –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
    
    # 5. –ù–æ–≤–æ–µ —Å—Ä–µ–¥–Ω–µ–µ
    doc.add_heading('5. –†–∞—Å—á—ë—Ç –Ω–æ–≤–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ:', level=2)
    doc.add_paragraph(f"({' + '.join([f'{x:,.0f}' for x in details['–û—Å—Ç–∞–≤—à–∏–µ—Å—è']])}) / {len(details['–û—Å—Ç–∞–≤—à–∏–µ—Å—è'])} = {details['–ù–æ–≤–æ–µ —Å—Ä–µ–¥–Ω–µ–µ']:,.2f} —Ä—É–±.")
    
    # 6. –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ
    doc.add_heading('6. –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', level=2)
    doc.add_paragraph(f"–û–∫—Ä—É–≥–ª—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {details['–û–∫—Ä—É–≥–ª—ë–Ω–Ω–æ–µ']:,.0f} —Ä—É–±.")
    
    # 7. –ò—Ç–æ–≥
    doc.add_heading('7. –ò—Ç–æ–≥–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:', level=2)
    p = doc.add_paragraph()
    p.add_run(f"{details['–û–∫—Ä—É–≥–ª—ë–Ω–Ω–æ–µ']:,.0f} —Ä—É–±–ª–µ–π").bold = True
    p.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    return doc

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –≤ Streamlit
def display_report(details, deviation_threshold, result):
    st.markdown("## –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –æ —Ä–∞—Å—á—ë—Ç–µ —É—Ä–æ–≤–Ω—è —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏")
    
    with st.expander("1. –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", expanded=True):
        for idx, (name, value) in enumerate(zip(details["–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏"], details["–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"]['–ó–Ω–∞—á–µ–Ω–∏–µ']), 1):
            st.markdown(f"{idx}. **{name}**: {value:,.0f} —Ä—É–±.")
    
    with st.expander("2. –°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ", expanded=True):
        values_str = " + ".join([f"{x:,.0f}" for x in details["–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"]['–ó–Ω–∞—á–µ–Ω–∏–µ']])
        st.markdown(f"({values_str}) / {len(details['–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'])} = **{details['–°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ']:,.0f} —Ä—É–±.**")
    
    with st.expander("3. –û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π", expanded=True):
        for x, dev in details["–û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"]:
            st.markdown(f"- {x:,.0f} —Ä—É–±.: –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ **{dev:+.2f}%**")
    
    with st.expander(f"4. –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ > {deviation_threshold}%)", expanded=True):
        if details["–ò—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ"]:
            for x in details["–ò—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ"]:
                st.markdown(f"- {x:,.0f} —Ä—É–±.")
        else:
            st.markdown("–ù–µ—Ç –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
    
    with st.expander("5. –ù–æ–≤–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ", expanded=True):
        st.markdown(f"({' + '.join([f'{x:,.0f}' for x in details['–û—Å—Ç–∞–≤—à–∏–µ—Å—è']])}) / {len(details['–û—Å—Ç–∞–≤—à–∏–µ—Å—è'])} = **{details['–ù–æ–≤–æ–µ —Å—Ä–µ–¥–Ω–µ–µ']:,.2f} —Ä—É–±.**")
    
    with st.expander("6. –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", expanded=True):
        st.markdown(f"–û–∫—Ä—É–≥–ª—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: **{details['–û–∫—Ä—É–≥–ª—ë–Ω–Ω–æ–µ']:,.0f} —Ä—É–±.**")
    
    st.success(f"## –ò—Ç–æ–≥–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏: {details['–û–∫—Ä—É–≥–ª—ë–Ω–Ω–æ–µ']:,.0f} —Ä—É–±–ª–µ–π")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    fig, ax = plt.subplots(figsize=(10, 4))
    ax.bar(["–í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏", "–ü–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è"], 
           [len(details["–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"]), len(details["–û—Å—Ç–∞–≤—à–∏–µ—Å—è"])],
           color=["lightcoral", "lightgreen"])
    ax.set_title("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–æ –∏ –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è")
    st.pyplot(fig)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    st.set_page_config(
        page_title="–ê—É–¥–∏—Ç: –£—Ä–æ–≤–µ–Ω—å —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏",
        page_icon="üßÆ",
        layout="wide"
    )
    
    st.title("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —É—Ä–æ–≤–Ω—è —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏")
    st.markdown("""
    ### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
    1. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö (—Ñ–∞–π–ª Excel –∏–ª–∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥)
    2. –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á—ë—Ç–∞
    3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"
    4. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç—á—ë—Ç –∏ —Å–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    """)
    
    # –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    input_method = st.radio(
        "**–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:**",
        ["üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª Excel", "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"],
        horizontal=True
    )
    
    data = None
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ Excel
    if input_method == "üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª Excel":
        uploaded_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ (—Å—Ç–æ–ª–±—Ü—ã: '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ó–Ω–∞—á–µ–Ω–∏–µ')", 
            type=["xlsx", "xls"]
        )
        
        if uploaded_file:
            try:
                data = pd.read_excel(uploaded_file, engine='openpyxl')
                if not all(col in data.columns for col in ['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ó–Ω–∞—á–µ–Ω–∏–µ']):
                    st.error("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å' –∏ '–ó–Ω–∞—á–µ–Ω–∏–µ'")
                    data = None
                else:
                    st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
                    st.dataframe(data)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: –†—É—á–Ω–æ–π –≤–≤–æ–¥
    else:
        st.markdown("### –í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤—Ä—É—á–Ω—É—é")
        num_indicators = st.number_input(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π", 
            min_value=1, max_value=20, value=5, step=1
        )
        
        indicators = []
        for i in range(num_indicators):
            cols = st.columns(2)
            with cols[0]:
                name = st.text_input(
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è {i+1}", 
                    value=f"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å {i+1}",
                    key=f"name_{i}"
                )
            with cols[1]:
                value = st.number_input(
                    f"–ó–Ω–∞—á–µ–Ω–∏–µ {i+1}", 
                    min_value=0, 
                    value=(i+1)*100000, 
                    step=1000,
                    key=f"value_{i}"
                )
            indicators.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": name, "–ó–Ω–∞—á–µ–Ω–∏–µ": value})
        
        if indicators:
            data = pd.DataFrame(indicators)
            st.dataframe(data)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—á—ë—Ç–∞
    st.sidebar.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á—ë—Ç–∞")
    deviation = st.sidebar.slider(
        "–î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ (%)", 
        min_value=0, max_value=100, value=50, step=1
    )
    rounding_limit = st.sidebar.number_input(
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–∏", 
        min_value=0, value=50, step=10
    )
    
    # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á—ë—Ç–∞
    if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å", type="primary") and data is not None:
        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—á—ë—Ç..."):
            result, details = calculate_materiality(data, deviation, rounding_limit)
        
        if result is None:
            st.error(details)
        else:
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
            display_report(details, deviation, result)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ Word-–æ—Ç—á—ë—Ç–∞
            doc = create_word_report(details, deviation)
            buffer = BytesIO()
            doc.save(buffer)
            buffer.seek(0)
            
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç –≤ Word",
                data=buffer,
                file_name="–£—Ä–æ–≤–µ–Ω—å_—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                help="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Word"
            )

if __name__ == "__main__":
    main()
